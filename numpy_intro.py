# -*- coding: utf-8 -*-
"""Numpy Intro

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WmrjLVHpyxawqLkkSZ0VSS8m0PDtkV6s
"""

import numpy as np

import scipy as sp

from google.colab import drive
drive.mount("/content/dataScience")

print(np.__version__)

print(np.__version__)

#Creating a 1D Array of Numpy
list2=np.array([1,2,3,4,5])
list2

list2[0:5:2]
list2[0:5:1]

#List Comprehension
a1=np.arange(10)
a2=np.arange(5,7)
result=[x*y for x,y in zip(a1,a2)]
result

a3=np.arange(17)
a4=np.arange(10,18)
a5=[x*y for x,y in zip(a3,a4)]
a5

a6=np.arange(23)
a7=np.arange(20, 28)
a8=[x*y for x,y in zip(a6,a7)]
a8

#Range Function
rng1=np.arange(50)
rng1
rng1=np.arange(1,50,4)
rng1

rng2=np.arange(32)
rng2

rng2=np.arange(1,30,3)
rng2

#Cool Things To do
matrix=np.arange(36).reshape(6,6)
matrix

matrix=np.arange(25).reshape(5,5)
matrix

matrix=np.arange(22,46).reshape(3,8)
matrix
#Slicing
matrix[0::2,2:]
matrix

matrix=np.arange(64).reshape(8,8)


matrix[3:8:2]

#To check the dimensions of Matrix or array
matrix.ndim

#To checking the data type
matrix.dtype

matrix.shape

matrix_0=np.zeros_like(matrix)
matrix_0

matrix_1=np.ones_like(matrix)
matrix_1

arr=np.arange(0,1)
arr

null=np.zeros((3,4))
null
null_1=np.ones((3,4))
null_1
null_1.ndim

null_1.shape

arr1=np.arange(0.1,1.0,0.2)
arr1

len(arr1)

#Linspace : When u need fix number of equal interval then its play a role and uses.
arr2=np.linspace(1,8, num=66)
arr2

